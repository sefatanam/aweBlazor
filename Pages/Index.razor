@page "/"

@*<div class="row ">
        <div class="col-md-3">
            <button class="btn btn-outline-primary" @onclick="@(async () => { StopWatch(); })">Start</button>
        </div>
        <div class="col-md-3">
            <button class="btn btn-outline-primary" @onclick="@(() => { isRunningStopWatch = false; })"> Pause</button>

        </div>
        <div class="col-md-6">
            <p4 style="color:ghostwhite">@stopwatch  </p4>

        </div>

    </div>*@


<div align="center">
    <button @onclick="@Start"> Start</button>
</div>
<h1 align="center" style="color:aliceblue">@TimeLeft</h1>


@if (show)
{

 @*<div class="row">
    <QuestionCard Id="@id.ToString()"></QuestionCard>
  </div>*@

}



<h4 align="center" style="color:aliceblue" >@displayText</h4>



@code{
     int id = 1;
    TimeSpan TimeLeft = new TimeSpan(0, 0, 15);
    string displayText = "";
   
    bool show=false;

    void Start()
    {
        Task.Delay(1000);
        displayText = " Time Start";
        show = true;
        Timer();

    }

    async Task Timer()
    {
        while (TimeLeft > new TimeSpan())
        {
            await Task.Delay(1000);
            TimeLeft = TimeLeft.Subtract(new TimeSpan(0, 0, 1));
            StateHasChanged();
        }


        await AfterTime();
        StateHasChanged();
    }

    Task AfterTime()
    {
        displayText = "Time Expire";
        TimeLeft =  new TimeSpan(0, 0, 15);
        return Task.CompletedTask;
    }

    //TimeSpan stopwatch = new TimeSpan();
    //bool isRunningStopWatch = false;

    //async Task StopWatch()
    //{

    //    isRunningStopWatch = true;
    //    while (isRunningStopWatch)
    //    {
    //        await Task.Delay(1000);
    //        stopwatch = stopwatch.Add(new TimeSpan(0, 1, 0));
    //        StateHasChanged();
    //    }

    //    stopwatch = new TimeSpan();
    //    isRunningStopWatch = false;

    //}


}


@* CHECK AND UNCHECK CHECKBOX SINGLE CHECKBOX WILL BE SELECTED ! IDEA IS HERE *@

@*
    <DxCheckBox Checked="@Checked"  @onclick="@(()=>CheckedChanged(1))">Silent Mode</DxCheckBox>
    <DxCheckBox Checked="@Checked"  @onclick="@(()=>CheckedChanged(2))">Silent Mode</DxCheckBox>
    <DxCheckBox Checked="@Checked"  @onclick="@(()=>CheckedChanged(3))">Silent Mode</DxCheckBox>
    <DxCheckBox Checked="@Checked"  @onclick="@(()=>CheckedChanged(4))">Silent Mode</DxCheckBox>

    <DxCheckBox Checked="@Checked1" CheckedChanged="@CheckedChanged1">Silent Mode</DxCheckBox>
        <DxCheckBox CheckedChanged="@CheckedChanged2" Checked="@Checked2">Enable sound</DxCheckBox>
        <DxCheckBox CheckedChanged="@CheckedChanged3" Checked="@Checked3">Enable vibration</DxCheckBox>

    @code{

        bool Enabled { get; set; } = false;
        bool Checked { get; set; } = false;
        bool Checked1 { get; set; } = false;
        bool Checked2 { get; set; } = false;
        bool Checked3 { get; set; } = false;

        void CheckedChanged(int value)
        {


        }

        void CheckedChanged1(bool value)
        {
            Checked1 = true;
            Checked2 = false;
            Checked2 = false;

            StateHasChanged();
        }
        void CheckedChanged2(bool value)
        {
            Checked2 = true;
            Checked1 = false;
            Checked3 = false;

            StateHasChanged();
        }
        void CheckedChanged3(bool value)
        {
            Checked1 = false;
            Checked2 = false;
            Checked3 = true;

            StateHasChanged();
        }
    }*@


@* USE ANOTHER RAZOR COMPONENT BY BUTTON CLICK *@

@*<MatButton>Test</MatButton>
    <button @onclick="(() => ShowComponent = true)">Show</button>
    <button @onclick="(() => ShowComponent = false)">Hide</button>

    @if (ShowComponent)
    {
        <FetchData></FetchData>
        Console.WriteLine("Shahin");
    }

    @code {
        bool ShowComponent { get; set; } = false;

    }*@